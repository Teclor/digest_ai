import os
import json
import glob
from kafka import KafkaProducer
from kafka.errors import KafkaError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Kafka
KAFKA_BOOTSTRAP_SERVERS = os.getenv("KAFKA_BOOTSTRAP_SERVERS", "kafka:9092")
RESOURCE_DIR = "./resources"


def load_json_files(resource_dir):
    files = glob.glob(os.path.join(resource_dir, "messages_*.json"))
    return files


def send_to_kafka(producer, topic_name, messages):
    for message in messages:
        record = {
            "data": message
        }

        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ {topic_name}: {record}")

        future = producer.send(topic_name, value=record)

        # –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        def on_send_success(record_metadata):
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            print(f"  –¢–æ–ø–∏–∫: {record_metadata.topic}")
            print(f"  –ü–∞—Ä—Ç–∏—Ü–∏—è: {record_metadata.partition}")
            print(f"  Offset: {record_metadata.offset}")

        # –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è –æ—à–∏–±–æ–∫
        def on_send_error(excp):
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {excp}")
            if isinstance(excp, KafkaError):
                print(f"  –ö–æ–¥ –æ—à–∏–±–∫–∏: {excp.args}")
                print(f"  –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {excp.message}")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–±—ç–∫–∏
        future.add_callback(on_send_success)
        future.add_errback(on_send_error)

    print("‚è≥ –û–∂–∏–¥–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏...")
    producer.flush()


def main():
    producer = KafkaProducer(
        bootstrap_servers=KAFKA_BOOTSTRAP_SERVERS,
        value_serializer=lambda v: json.dumps(v, ensure_ascii=False).encode('utf-8'),
        batch_size=16384,
        linger_ms=5,
        buffer_memory=33554432,
        max_in_flight_requests_per_connection=5,
        acks=1
    )

    files = load_json_files(RESOURCE_DIR)

    if not files:
        print(f"–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {RESOURCE_DIR}")
        return

    for file_path in files:
        file_name = os.path.basename(file_path)

        if not file_name.startswith("messages_"):
            print(f"–ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª: {file_name}")
            continue

        topic_name = file_name.replace("messages_", "").replace(".json", "")

        with open(file_path, "r", encoding="utf-8") as f:
            try:
                messages = json.load(f)

                # –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                if not isinstance(messages, list):
                    print(f"‚ö†Ô∏è –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω —Ç–∏–ø: {type(messages)}")
                    continue

                send_to_kafka(producer, topic_name, messages)

            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ JSON —Ñ–∞–π–ª–µ {file_path}: {e}")

    producer.flush()
    producer.close()
    print("‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")


if __name__ == "__main__":
    main()